<?php
/**
 * OrderSearchOrdersRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\Order
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * order Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\Order\Model;

use \ArrayAccess;
use \GeminiCommerce\Order\ObjectSerializer;

/**
 * OrderSearchOrdersRequest Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\Order
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderSearchOrdersRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderSearchOrdersRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tenant_id' => 'string',
        'search_query' => 'string',
        'page_size' => 'int',
        'page_token' => 'string',
        'order_by' => '\GeminiCommerce\Order\Model\OrderOrderBy[]',
        'status_filter' => '\GeminiCommerce\Order\Model\OrderStatusFilter',
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'payment_filter' => '\GeminiCommerce\Order\Model\OrderPaymentFilter',
        'agent_grn' => 'string',
        'updated_at_from' => '\DateTime',
        'updated_at_to' => '\DateTime',
        'on_hold' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tenant_id' => null,
        'search_query' => null,
        'page_size' => 'int64',
        'page_token' => null,
        'order_by' => null,
        'status_filter' => null,
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'payment_filter' => null,
        'agent_grn' => null,
        'updated_at_from' => 'date-time',
        'updated_at_to' => 'date-time',
        'on_hold' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tenant_id' => false,
        'search_query' => false,
        'page_size' => false,
        'page_token' => false,
        'order_by' => false,
        'status_filter' => false,
        'from_date' => false,
        'to_date' => false,
        'payment_filter' => false,
        'agent_grn' => false,
        'updated_at_from' => false,
        'updated_at_to' => false,
        'on_hold' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tenant_id' => 'tenantId',
        'search_query' => 'searchQuery',
        'page_size' => 'pageSize',
        'page_token' => 'pageToken',
        'order_by' => 'orderBy',
        'status_filter' => 'statusFilter',
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'payment_filter' => 'paymentFilter',
        'agent_grn' => 'agentGrn',
        'updated_at_from' => 'updatedAtFrom',
        'updated_at_to' => 'updatedAtTo',
        'on_hold' => 'onHold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tenant_id' => 'setTenantId',
        'search_query' => 'setSearchQuery',
        'page_size' => 'setPageSize',
        'page_token' => 'setPageToken',
        'order_by' => 'setOrderBy',
        'status_filter' => 'setStatusFilter',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'payment_filter' => 'setPaymentFilter',
        'agent_grn' => 'setAgentGrn',
        'updated_at_from' => 'setUpdatedAtFrom',
        'updated_at_to' => 'setUpdatedAtTo',
        'on_hold' => 'setOnHold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tenant_id' => 'getTenantId',
        'search_query' => 'getSearchQuery',
        'page_size' => 'getPageSize',
        'page_token' => 'getPageToken',
        'order_by' => 'getOrderBy',
        'status_filter' => 'getStatusFilter',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'payment_filter' => 'getPaymentFilter',
        'agent_grn' => 'getAgentGrn',
        'updated_at_from' => 'getUpdatedAtFrom',
        'updated_at_to' => 'getUpdatedAtTo',
        'on_hold' => 'getOnHold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('search_query', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('page_token', $data ?? [], null);
        $this->setIfExists('order_by', $data ?? [], null);
        $this->setIfExists('status_filter', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('payment_filter', $data ?? [], null);
        $this->setIfExists('agent_grn', $data ?? [], null);
        $this->setIfExists('updated_at_from', $data ?? [], null);
        $this->setIfExists('updated_at_to', $data ?? [], null);
        $this->setIfExists('on_hold', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tenant_id'] === null) {
            $invalidProperties[] = "'tenant_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets search_query
     *
     * @return string|null
     */
    public function getSearchQuery()
    {
        return $this->container['search_query'];
    }

    /**
     * Sets search_query
     *
     * @param string|null $search_query search_query
     *
     * @return self
     */
    public function setSearchQuery($search_query)
    {
        if (is_null($search_query)) {
            throw new \InvalidArgumentException('non-nullable search_query cannot be null');
        }
        $this->container['search_query'] = $search_query;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size The maximum number of orders to return. The service may return fewer than this value. If unspecified, at most 10 orders will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets page_token
     *
     * @return string|null
     */
    public function getPageToken()
    {
        return $this->container['page_token'];
    }

    /**
     * Sets page_token
     *
     * @param string|null $page_token A page token, received from a previous `ListOrders` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListOrders` must match the call that provided the page token.
     *
     * @return self
     */
    public function setPageToken($page_token)
    {
        if (is_null($page_token)) {
            throw new \InvalidArgumentException('non-nullable page_token cannot be null');
        }
        $this->container['page_token'] = $page_token;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \GeminiCommerce\Order\Model\OrderOrderBy[]|null
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \GeminiCommerce\Order\Model\OrderOrderBy[]|null $order_by order_by
     *
     * @return self
     */
    public function setOrderBy($order_by)
    {
        if (is_null($order_by)) {
            throw new \InvalidArgumentException('non-nullable order_by cannot be null');
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets status_filter
     *
     * @return \GeminiCommerce\Order\Model\OrderStatusFilter|null
     */
    public function getStatusFilter()
    {
        return $this->container['status_filter'];
    }

    /**
     * Sets status_filter
     *
     * @param \GeminiCommerce\Order\Model\OrderStatusFilter|null $status_filter status_filter
     *
     * @return self
     */
    public function setStatusFilter($status_filter)
    {
        if (is_null($status_filter)) {
            throw new \InvalidArgumentException('non-nullable status_filter cannot be null');
        }
        $this->container['status_filter'] = $status_filter;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date from_date
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date to_date
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets payment_filter
     *
     * @return \GeminiCommerce\Order\Model\OrderPaymentFilter|null
     */
    public function getPaymentFilter()
    {
        return $this->container['payment_filter'];
    }

    /**
     * Sets payment_filter
     *
     * @param \GeminiCommerce\Order\Model\OrderPaymentFilter|null $payment_filter payment_filter
     *
     * @return self
     */
    public function setPaymentFilter($payment_filter)
    {
        if (is_null($payment_filter)) {
            throw new \InvalidArgumentException('non-nullable payment_filter cannot be null');
        }
        $this->container['payment_filter'] = $payment_filter;

        return $this;
    }

    /**
     * Gets agent_grn
     *
     * @return string|null
     */
    public function getAgentGrn()
    {
        return $this->container['agent_grn'];
    }

    /**
     * Sets agent_grn
     *
     * @param string|null $agent_grn agent_grn
     *
     * @return self
     */
    public function setAgentGrn($agent_grn)
    {
        if (is_null($agent_grn)) {
            throw new \InvalidArgumentException('non-nullable agent_grn cannot be null');
        }
        $this->container['agent_grn'] = $agent_grn;

        return $this;
    }

    /**
     * Gets updated_at_from
     *
     * @return \DateTime|null
     */
    public function getUpdatedAtFrom()
    {
        return $this->container['updated_at_from'];
    }

    /**
     * Sets updated_at_from
     *
     * @param \DateTime|null $updated_at_from updated_at_from
     *
     * @return self
     */
    public function setUpdatedAtFrom($updated_at_from)
    {
        if (is_null($updated_at_from)) {
            throw new \InvalidArgumentException('non-nullable updated_at_from cannot be null');
        }
        $this->container['updated_at_from'] = $updated_at_from;

        return $this;
    }

    /**
     * Gets updated_at_to
     *
     * @return \DateTime|null
     */
    public function getUpdatedAtTo()
    {
        return $this->container['updated_at_to'];
    }

    /**
     * Sets updated_at_to
     *
     * @param \DateTime|null $updated_at_to updated_at_to
     *
     * @return self
     */
    public function setUpdatedAtTo($updated_at_to)
    {
        if (is_null($updated_at_to)) {
            throw new \InvalidArgumentException('non-nullable updated_at_to cannot be null');
        }
        $this->container['updated_at_to'] = $updated_at_to;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return bool|null
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param bool|null $on_hold on_hold
     *
     * @return self
     */
    public function setOnHold($on_hold)
    {
        if (is_null($on_hold)) {
            throw new \InvalidArgumentException('non-nullable on_hold cannot be null');
        }
        $this->container['on_hold'] = $on_hold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


